// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Urbamais.Infra.Config;

#nullable disable

namespace Urbamais.Infra.Migrations
{
    [DbContext(typeof(ContextEf))]
    [Migration("20230609000124_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseSerialColumns(modelBuilder);

            modelBuilder.Entity("Urbamais.Domain.Entities.EntitiesOfCore.Cidade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DataAlteracao")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_alteracao");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_criacao");

                    b.Property<DateTime?>("DataExclusao")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_exclusao");

                    b.Property<int>("Uf")
                        .HasColumnType("integer")
                        .HasColumnName("uf");

                    b.HasKey("Id")
                        .HasName("cidade_id");

                    b.ToTable("cidade", (string)null);
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.EntitiesOfCore.Email", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DataAlteracao")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_alteracao");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_criacao");

                    b.Property<DateTime?>("DataExclusao")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_exclusao");

                    b.Property<string>("Endereco")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("endereco");

                    b.HasKey("Id")
                        .HasName("email_id");

                    b.ToTable("email", (string)null);
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.EntitiesOfCore.Endereco", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<string>("Bairro")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("bairro");

                    b.Property<string>("Cep")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("cep");

                    b.Property<int>("CidadeId")
                        .HasColumnType("integer")
                        .HasColumnName("cidade_id");

                    b.Property<string>("Complemento")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("complemento");

                    b.Property<DateTime?>("DataAlteracao")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_alteracao");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_criacao");

                    b.Property<DateTime?>("DataExclusao")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_exclusao");

                    b.Property<string>("Logradouro")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("logradouro");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("numero");

                    b.HasKey("Id")
                        .HasName("endereco_id");

                    b.HasIndex("CidadeId");

                    b.ToTable("endereco", (string)null);
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.EntitiesOfCore.Telefone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DataAlteracao")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_alteracao");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_criacao");

                    b.Property<DateTime?>("DataExclusao")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_exclusao");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("numero");

                    b.HasKey("Id")
                        .HasName("telefone_id");

                    b.ToTable("telefone", (string)null);
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.Fornecedor.Colaborador", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DataAlteracao")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_alteracao");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_criacao");

                    b.Property<DateTime?>("DataExclusao")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_exclusao");

                    b.Property<DateTime?>("DataValidadeCNH")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_validade_cnh");

                    b.Property<DateTime?>("DataValidadeExameAdmissional")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_validade_exame_admissional");

                    b.Property<string>("NumeroCNH")
                        .HasMaxLength(9)
                        .HasColumnType("character varying(9)")
                        .HasColumnName("numero_cnh");

                    b.Property<string>("NumeroCarteiraTrabalho")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("numero_carteira_trabalho");

                    b.Property<string>("NumeroExameAdmissional")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("numero_exame_admissional");

                    b.Property<string>("TipoCNH")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("tipo_cnh");

                    b.HasKey("Id")
                        .HasName("colaborador_id");

                    b.ToTable("colaborador", (string)null);
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.Fornecedor.Equipamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DataAlteracao")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_alteracao");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_criacao");

                    b.Property<DateTime?>("DataExclusao")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_exclusao");

                    b.HasKey("Id")
                        .HasName("equipamento_id");

                    b.ToTable("equipamento", (string)null);
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.Fornecedor.Fornecedor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DataAlteracao")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_alteracao");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_criacao");

                    b.Property<DateTime?>("DataExclusao")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_exclusao");

                    b.Property<string>("InscricaoEstadual")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("inscricao_estadual");

                    b.Property<string>("InscricaoMunicipal")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("inscricao_municipal");

                    b.HasKey("Id")
                        .HasName("fornecedor_id");

                    b.ToTable("fornecedor", (string)null);
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.Obra.companie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DataAlteracao")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_alteracao");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_criacao");

                    b.Property<DateTime?>("DataExclusao")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_exclusao");

                    b.Property<string>("InscricaoEstadual")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("inscricao_estadual");

                    b.Property<string>("InscricaoMunicipal")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("inscricao_municipal");

                    b.HasKey("Id")
                        .HasName("companie_id");

                    b.ToTable("companie", (string)null);
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.Obra.Obra", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DataAlteracao")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_alteracao");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_criacao");

                    b.Property<DateTime?>("DataExclusao")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_exclusao");

                    b.Property<int>("companieId")
                        .HasColumnType("integer")
                        .HasColumnName("companie_id");

                    b.HasKey("Id")
                        .HasName("obra_id");

                    b.HasIndex("companieId");

                    b.ToTable("obra", (string)null);
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.Planejamento.Insumo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DataAlteracao")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_alteracao");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_criacao");

                    b.Property<DateTime?>("DataExclusao")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_exclusao");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("descricao");

                    b.Property<int>("Tipo")
                        .HasColumnType("integer")
                        .HasColumnName("tipo");

                    b.Property<int>("UnidadeId")
                        .HasColumnType("integer")
                        .HasColumnName("unidade_id");

                    b.HasKey("Id")
                        .HasName("insumo_id");

                    b.HasIndex("UnidadeId");

                    b.ToTable("insumo", (string)null);
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.Planejamento.Planejamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DataAlteracao")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_alteracao");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_criacao");

                    b.Property<DateTime?>("DataExclusao")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_exclusao");

                    b.Property<int>("ObraId")
                        .HasColumnType("integer")
                        .HasColumnName("obra_id");

                    b.HasKey("Id")
                        .HasName("planejamento_id");

                    b.HasIndex("ObraId");

                    b.ToTable("planejamento", (string)null);
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.Planejamento.PlanejamentoInsumo", b =>
                {
                    b.Property<int>("PlanejamentoId")
                        .HasColumnType("integer")
                        .HasColumnName("planejamento_id");

                    b.Property<int>("InsumoId")
                        .HasColumnType("integer")
                        .HasColumnName("insumo_id");

                    b.Property<DateTime>("DataFim")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_fim");

                    b.Property<DateTime>("DataInicio")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_inicio");

                    b.Property<double>("Quantidade")
                        .HasColumnType("double precision")
                        .HasColumnName("quantidade");

                    b.Property<decimal>("ValorUnitario")
                        .HasColumnType("numeric")
                        .HasColumnName("valor_unitario");

                    b.HasKey("PlanejamentoId", "InsumoId");

                    b.HasIndex("InsumoId");

                    b.ToTable("planejamento_insumo", (string)null);
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.Planejamento.Unidade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DataAlteracao")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_alteracao");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_criacao");

                    b.Property<DateTime?>("DataExclusao")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_exclusao");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("descricao");

                    b.HasKey("Id")
                        .HasName("unidade_id");

                    b.ToTable("unidade", (string)null);
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.Suprimento.Compra", b =>
                {
                    b.Property<int>("PedidoId")
                        .HasColumnType("integer")
                        .HasColumnName("pedido_id");

                    b.Property<int>("InsumoId")
                        .HasColumnType("integer")
                        .HasColumnName("insumo_id");

                    b.Property<DateTime>("DataEntrega")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_entrega");

                    b.Property<int>("FornecedorId")
                        .HasColumnType("integer")
                        .HasColumnName("fornecedor_id");

                    b.Property<int>("LocaEntregaId")
                        .HasColumnType("integer")
                        .HasColumnName("local_entrega_id");

                    b.Property<double>("Quantidade")
                        .HasColumnType("double precision")
                        .HasColumnName("quantidade");

                    b.Property<decimal>("ValorUnitario")
                        .HasColumnType("numeric")
                        .HasColumnName("valor_unitario");

                    b.HasKey("PedidoId", "InsumoId");

                    b.HasIndex("FornecedorId");

                    b.HasIndex("InsumoId");

                    b.HasIndex("LocaEntregaId");

                    b.ToTable("compra", (string)null);
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.Suprimento.Pedido", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DataAlteracao")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_alteracao");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_criacao");

                    b.Property<DateTime?>("DataExclusao")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_exclusao");

                    b.Property<int>("PlanejamentoId")
                        .HasColumnType("integer")
                        .HasColumnName("planejamento_id");

                    b.HasKey("Id")
                        .HasName("pedido_id");

                    b.HasIndex("PlanejamentoId");

                    b.ToTable("pedido", (string)null);
                });

            modelBuilder.Entity("colaboradores_emails", b =>
                {
                    b.Property<int>("colaborador_id")
                        .HasColumnType("integer");

                    b.Property<int>("email_id")
                        .HasColumnType("integer");

                    b.HasKey("colaborador_id", "email_id");

                    b.HasIndex("email_id");

                    b.ToTable("colaboradores_emails");
                });

            modelBuilder.Entity("colaboradores_enderecos", b =>
                {
                    b.Property<int>("colaborador_id")
                        .HasColumnType("integer");

                    b.Property<int>("endereco_id")
                        .HasColumnType("integer");

                    b.HasKey("colaborador_id", "endereco_id");

                    b.HasIndex("endereco_id");

                    b.ToTable("colaboradores_enderecos");
                });

            modelBuilder.Entity("colaboradores_telefones", b =>
                {
                    b.Property<int>("colaborador_id")
                        .HasColumnType("integer");

                    b.Property<int>("telefone_id")
                        .HasColumnType("integer");

                    b.HasKey("colaborador_id", "telefone_id");

                    b.HasIndex("telefone_id");

                    b.ToTable("colaboradores_telefones");
                });

            modelBuilder.Entity("companies_emails", b =>
                {
                    b.Property<int>("email_id")
                        .HasColumnType("integer");

                    b.Property<int>("companie_id")
                        .HasColumnType("integer");

                    b.HasKey("email_id", "companie_id");

                    b.HasIndex("companie_id");

                    b.ToTable("companies_emails");
                });

            modelBuilder.Entity("companies_enderecos", b =>
                {
                    b.Property<int>("companie_id")
                        .HasColumnType("integer");

                    b.Property<int>("endereco_id")
                        .HasColumnType("integer");

                    b.HasKey("companie_id", "endereco_id");

                    b.HasIndex("endereco_id");

                    b.ToTable("companies_enderecos");
                });

            modelBuilder.Entity("companies_telefones", b =>
                {
                    b.Property<int>("companie_id")
                        .HasColumnType("integer");

                    b.Property<int>("telefone_id")
                        .HasColumnType("integer");

                    b.HasKey("companie_id", "telefone_id");

                    b.HasIndex("telefone_id");

                    b.ToTable("companies_telefones");
                });

            modelBuilder.Entity("fornecedores_emails", b =>
                {
                    b.Property<int>("email_id")
                        .HasColumnType("integer");

                    b.Property<int>("fornecedor_id")
                        .HasColumnType("integer");

                    b.HasKey("email_id", "fornecedor_id");

                    b.HasIndex("fornecedor_id");

                    b.ToTable("fornecedores_emails");
                });

            modelBuilder.Entity("fornecedores_enderecos", b =>
                {
                    b.Property<int>("endereco_id")
                        .HasColumnType("integer");

                    b.Property<int>("fornecedor_id")
                        .HasColumnType("integer");

                    b.HasKey("endereco_id", "fornecedor_id");

                    b.HasIndex("fornecedor_id");

                    b.ToTable("fornecedores_enderecos");
                });

            modelBuilder.Entity("fornecedores_equipamentos", b =>
                {
                    b.Property<int>("equipamento_id")
                        .HasColumnType("integer");

                    b.Property<int>("fornecedor_id")
                        .HasColumnType("integer");

                    b.HasKey("equipamento_id", "fornecedor_id");

                    b.HasIndex("fornecedor_id");

                    b.ToTable("fornecedores_equipamentos");
                });

            modelBuilder.Entity("fornecedores_telefones", b =>
                {
                    b.Property<int>("fornecedor_id")
                        .HasColumnType("integer");

                    b.Property<int>("telefone_id")
                        .HasColumnType("integer");

                    b.HasKey("fornecedor_id", "telefone_id");

                    b.HasIndex("telefone_id");

                    b.ToTable("fornecedores_telefones");
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.EntitiesOfCore.Cidade", b =>
                {
                    b.OwnsOne("Core.ValueObjects.NomeVO", "Nome", b1 =>
                        {
                            b1.Property<int>("CidadeId")
                                .HasColumnType("integer");

                            b1.Property<string>("Nome")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("character varying(255)")
                                .HasColumnName("nome");

                            b1.HasKey("CidadeId");

                            b1.ToTable("cidade");

                            b1.WithOwner()
                                .HasForeignKey("CidadeId");
                        });

                    b.Navigation("Nome")
                        .IsRequired();
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.EntitiesOfCore.Endereco", b =>
                {
                    b.HasOne("Urbamais.Domain.Entities.EntitiesOfCore.Cidade", "Cidade")
                        .WithMany("Enderecos")
                        .HasForeignKey("CidadeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cidade");
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.Fornecedor.Colaborador", b =>
                {
                    b.OwnsOne("Core.ValueObjects.CpfVO", "Cpf", b1 =>
                        {
                            b1.Property<int>("ColaboradorId")
                                .HasColumnType("integer");

                            b1.Property<string>("Cpf")
                                .IsRequired()
                                .HasMaxLength(11)
                                .HasColumnType("character varying(11)")
                                .HasColumnName("cpf");

                            b1.HasKey("ColaboradorId");

                            b1.ToTable("colaborador");

                            b1.WithOwner()
                                .HasForeignKey("ColaboradorId");
                        });

                    b.OwnsOne("Core.ValueObjects.NomeVO", "Nome", b1 =>
                        {
                            b1.Property<int>("ColaboradorId")
                                .HasColumnType("integer");

                            b1.Property<string>("Nome")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("character varying(255)")
                                .HasColumnName("nome");

                            b1.HasKey("ColaboradorId");

                            b1.ToTable("colaborador");

                            b1.WithOwner()
                                .HasForeignKey("ColaboradorId");
                        });

                    b.Navigation("Cpf")
                        .IsRequired();

                    b.Navigation("Nome")
                        .IsRequired();
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.Fornecedor.Equipamento", b =>
                {
                    b.OwnsOne("Core.ValueObjects.DescricaoVO", "Descricao", b1 =>
                        {
                            b1.Property<int>("EquipamentoId")
                                .HasColumnType("integer");

                            b1.Property<string>("Descricao")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("character varying(255)")
                                .HasColumnName("descricao");

                            b1.HasKey("EquipamentoId");

                            b1.ToTable("equipamento");

                            b1.WithOwner()
                                .HasForeignKey("EquipamentoId");
                        });

                    b.OwnsOne("Core.ValueObjects.NomeVO", "Nome", b1 =>
                        {
                            b1.Property<int>("EquipamentoId")
                                .HasColumnType("integer");

                            b1.Property<string>("Nome")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("character varying(255)")
                                .HasColumnName("nome");

                            b1.HasKey("EquipamentoId");

                            b1.ToTable("equipamento");

                            b1.WithOwner()
                                .HasForeignKey("EquipamentoId");
                        });

                    b.Navigation("Descricao")
                        .IsRequired();

                    b.Navigation("Nome")
                        .IsRequired();
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.Fornecedor.Fornecedor", b =>
                {
                    b.OwnsOne("Core.ValueObjects.CnpjVO", "Cnpj", b1 =>
                        {
                            b1.Property<int>("FornecedorId")
                                .HasColumnType("integer");

                            b1.Property<string>("Cnpj")
                                .IsRequired()
                                .HasMaxLength(14)
                                .HasColumnType("character varying(14)")
                                .HasColumnName("cnpj");

                            b1.HasKey("FornecedorId");

                            b1.ToTable("fornecedor");

                            b1.WithOwner()
                                .HasForeignKey("FornecedorId");
                        });

                    b.OwnsOne("Core.ValueObjects.NomeVO", "NomeFantasia", b1 =>
                        {
                            b1.Property<int>("FornecedorId")
                                .HasColumnType("integer");

                            b1.Property<string>("Nome")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("character varying(255)")
                                .HasColumnName("nome_fantasia");

                            b1.HasKey("FornecedorId");

                            b1.ToTable("fornecedor");

                            b1.WithOwner()
                                .HasForeignKey("FornecedorId");
                        });

                    b.OwnsOne("Core.ValueObjects.NomeVO", "RazaoSocial", b1 =>
                        {
                            b1.Property<int>("FornecedorId")
                                .HasColumnType("integer");

                            b1.Property<string>("Nome")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("character varying(255)")
                                .HasColumnName("razao_social");

                            b1.HasKey("FornecedorId");

                            b1.ToTable("fornecedor");

                            b1.WithOwner()
                                .HasForeignKey("FornecedorId");
                        });

                    b.Navigation("Cnpj")
                        .IsRequired();

                    b.Navigation("NomeFantasia")
                        .IsRequired();

                    b.Navigation("RazaoSocial")
                        .IsRequired();
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.Obra.companie", b =>
                {
                    b.OwnsOne("Core.ValueObjects.CnpjVO", "Cnpj", b1 =>
                        {
                            b1.Property<int>("companieId")
                                .HasColumnType("integer");

                            b1.Property<string>("Cnpj")
                                .IsRequired()
                                .HasMaxLength(14)
                                .HasColumnType("character varying(14)")
                                .HasColumnName("cnpj");

                            b1.HasKey("companieId");

                            b1.ToTable("companie");

                            b1.WithOwner()
                                .HasForeignKey("companieId");
                        });

                    b.OwnsOne("Core.ValueObjects.NomeVO", "NomeFantasia", b1 =>
                        {
                            b1.Property<int>("companieId")
                                .HasColumnType("integer");

                            b1.Property<string>("Nome")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("character varying(255)")
                                .HasColumnName("nome_fantasia");

                            b1.HasKey("companieId");

                            b1.ToTable("companie");

                            b1.WithOwner()
                                .HasForeignKey("companieId");
                        });

                    b.OwnsOne("Core.ValueObjects.NomeVO", "RazaoSocial", b1 =>
                        {
                            b1.Property<int>("companieId")
                                .HasColumnType("integer");

                            b1.Property<string>("Nome")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("character varying(255)")
                                .HasColumnName("razao_social");

                            b1.HasKey("companieId");

                            b1.ToTable("companie");

                            b1.WithOwner()
                                .HasForeignKey("companieId");
                        });

                    b.Navigation("Cnpj")
                        .IsRequired();

                    b.Navigation("NomeFantasia")
                        .IsRequired();

                    b.Navigation("RazaoSocial")
                        .IsRequired();
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.Obra.Obra", b =>
                {
                    b.HasOne("Urbamais.Domain.Entities.Obra.companie", "companie")
                        .WithMany("Obras")
                        .HasForeignKey("companieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Core.ValueObjects.DescricaoVO", "Descricao", b1 =>
                        {
                            b1.Property<int>("ObraId")
                                .HasColumnType("integer");

                            b1.Property<string>("Descricao")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("character varying(255)")
                                .HasColumnName("descricao");

                            b1.HasKey("ObraId");

                            b1.ToTable("obra");

                            b1.WithOwner()
                                .HasForeignKey("ObraId");
                        });

                    b.Navigation("Descricao")
                        .IsRequired();

                    b.Navigation("companie");
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.Planejamento.Insumo", b =>
                {
                    b.HasOne("Urbamais.Domain.Entities.Planejamento.Unidade", "Unidade")
                        .WithMany("Insumos")
                        .HasForeignKey("UnidadeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Core.ValueObjects.NomeVO", "Nome", b1 =>
                        {
                            b1.Property<int>("InsumoId")
                                .HasColumnType("integer");

                            b1.Property<string>("Nome")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("character varying(255)")
                                .HasColumnName("nome");

                            b1.HasKey("InsumoId");

                            b1.ToTable("insumo");

                            b1.WithOwner()
                                .HasForeignKey("InsumoId");
                        });

                    b.Navigation("Nome")
                        .IsRequired();

                    b.Navigation("Unidade");
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.Planejamento.Planejamento", b =>
                {
                    b.HasOne("Urbamais.Domain.Entities.Obra.Obra", "Obra")
                        .WithMany("Planejamentos")
                        .HasForeignKey("ObraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Obra");
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.Planejamento.PlanejamentoInsumo", b =>
                {
                    b.HasOne("Urbamais.Domain.Entities.Planejamento.Insumo", "Insumo")
                        .WithMany("PlanejamentosInsumos")
                        .HasForeignKey("InsumoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Urbamais.Domain.Entities.Planejamento.Planejamento", "Planejamento")
                        .WithMany("PlanejamentosInsumos")
                        .HasForeignKey("PlanejamentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Insumo");

                    b.Navigation("Planejamento");
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.Suprimento.Compra", b =>
                {
                    b.HasOne("Urbamais.Domain.Entities.Fornecedor.Fornecedor", "Fornecedor")
                        .WithMany()
                        .HasForeignKey("FornecedorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Urbamais.Domain.Entities.Planejamento.Insumo", "Insumo")
                        .WithMany()
                        .HasForeignKey("InsumoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Urbamais.Domain.Entities.EntitiesOfCore.Endereco", "LocalEntrega")
                        .WithMany("Compras")
                        .HasForeignKey("LocaEntregaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Urbamais.Domain.Entities.Suprimento.Pedido", "Pedido")
                        .WithMany()
                        .HasForeignKey("PedidoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fornecedor");

                    b.Navigation("Insumo");

                    b.Navigation("LocalEntrega");

                    b.Navigation("Pedido");
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.Suprimento.Pedido", b =>
                {
                    b.HasOne("Urbamais.Domain.Entities.Planejamento.Planejamento", "Planejamento")
                        .WithMany("Pedidos")
                        .HasForeignKey("PlanejamentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Planejamento");
                });

            modelBuilder.Entity("colaboradores_emails", b =>
                {
                    b.HasOne("Urbamais.Domain.Entities.Fornecedor.Colaborador", null)
                        .WithMany()
                        .HasForeignKey("colaborador_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Urbamais.Domain.Entities.EntitiesOfCore.Email", null)
                        .WithMany()
                        .HasForeignKey("email_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("colaboradores_enderecos", b =>
                {
                    b.HasOne("Urbamais.Domain.Entities.Fornecedor.Colaborador", null)
                        .WithMany()
                        .HasForeignKey("colaborador_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Urbamais.Domain.Entities.EntitiesOfCore.Endereco", null)
                        .WithMany()
                        .HasForeignKey("endereco_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("colaboradores_telefones", b =>
                {
                    b.HasOne("Urbamais.Domain.Entities.Fornecedor.Colaborador", null)
                        .WithMany()
                        .HasForeignKey("colaborador_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Urbamais.Domain.Entities.EntitiesOfCore.Telefone", null)
                        .WithMany()
                        .HasForeignKey("telefone_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("companies_emails", b =>
                {
                    b.HasOne("Urbamais.Domain.Entities.EntitiesOfCore.Email", null)
                        .WithMany()
                        .HasForeignKey("email_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Urbamais.Domain.Entities.Obra.companie", null)
                        .WithMany()
                        .HasForeignKey("companie_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("companies_enderecos", b =>
                {
                    b.HasOne("Urbamais.Domain.Entities.Obra.companie", null)
                        .WithMany()
                        .HasForeignKey("companie_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Urbamais.Domain.Entities.EntitiesOfCore.Endereco", null)
                        .WithMany()
                        .HasForeignKey("endereco_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("companies_telefones", b =>
                {
                    b.HasOne("Urbamais.Domain.Entities.Obra.companie", null)
                        .WithMany()
                        .HasForeignKey("companie_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Urbamais.Domain.Entities.EntitiesOfCore.Telefone", null)
                        .WithMany()
                        .HasForeignKey("telefone_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("fornecedores_emails", b =>
                {
                    b.HasOne("Urbamais.Domain.Entities.EntitiesOfCore.Email", null)
                        .WithMany()
                        .HasForeignKey("email_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Urbamais.Domain.Entities.Fornecedor.Fornecedor", null)
                        .WithMany()
                        .HasForeignKey("fornecedor_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("fornecedores_enderecos", b =>
                {
                    b.HasOne("Urbamais.Domain.Entities.EntitiesOfCore.Endereco", null)
                        .WithMany()
                        .HasForeignKey("endereco_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Urbamais.Domain.Entities.Fornecedor.Fornecedor", null)
                        .WithMany()
                        .HasForeignKey("fornecedor_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("fornecedores_equipamentos", b =>
                {
                    b.HasOne("Urbamais.Domain.Entities.Fornecedor.Equipamento", null)
                        .WithMany()
                        .HasForeignKey("equipamento_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Urbamais.Domain.Entities.Fornecedor.Fornecedor", null)
                        .WithMany()
                        .HasForeignKey("fornecedor_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("fornecedores_telefones", b =>
                {
                    b.HasOne("Urbamais.Domain.Entities.Fornecedor.Fornecedor", null)
                        .WithMany()
                        .HasForeignKey("fornecedor_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Urbamais.Domain.Entities.EntitiesOfCore.Telefone", null)
                        .WithMany()
                        .HasForeignKey("telefone_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.EntitiesOfCore.Cidade", b =>
                {
                    b.Navigation("Enderecos");
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.EntitiesOfCore.Endereco", b =>
                {
                    b.Navigation("Compras");
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.Obra.companie", b =>
                {
                    b.Navigation("Obras");
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.Obra.Obra", b =>
                {
                    b.Navigation("Planejamentos");
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.Planejamento.Insumo", b =>
                {
                    b.Navigation("PlanejamentosInsumos");
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.Planejamento.Planejamento", b =>
                {
                    b.Navigation("Pedidos");

                    b.Navigation("PlanejamentosInsumos");
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.Planejamento.Unidade", b =>
                {
                    b.Navigation("Insumos");
                });
#pragma warning restore 612, 618
        }
    }
}
