// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Urbamais.Infra.Config;

#nullable disable

namespace Urbamais.Infra.Migrations
{
    [DbContext(typeof(ContextEf))]
    [Migration("20230915113558_Financeiro")]
    partial class Financeiro
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseSerialColumns(modelBuilder);

            modelBuilder.Entity("Urbamais.Domain.Entities.EntitiesOfCore.Cidade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("creation_date");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deletion_date");

                    b.Property<string>("IdUserCreation")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("id_user_creation");

                    b.Property<string>("IdUserDeletion")
                        .HasColumnType("text")
                        .HasColumnName("id_user_deletion");

                    b.Property<string>("IdUserModification")
                        .HasColumnType("text")
                        .HasColumnName("id_user_modification");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modification_date");

                    b.Property<int>("Uf")
                        .HasColumnType("integer")
                        .HasColumnName("uf");

                    b.HasKey("Id")
                        .HasName("cidade_id");

                    b.ToTable("cidade", (string)null);
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.EntitiesOfCore.Email", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("creation_date");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deletion_date");

                    b.Property<string>("Endereco")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("endereco");

                    b.Property<string>("IdUserCreation")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("id_user_creation");

                    b.Property<string>("IdUserDeletion")
                        .HasColumnType("text")
                        .HasColumnName("id_user_deletion");

                    b.Property<string>("IdUserModification")
                        .HasColumnType("text")
                        .HasColumnName("id_user_modification");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modification_date");

                    b.HasKey("Id")
                        .HasName("email_id");

                    b.ToTable("email", (string)null);
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.EntitiesOfCore.Endereco", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<string>("Bairro")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("bairro");

                    b.Property<int>("CidadeId")
                        .HasColumnType("integer")
                        .HasColumnName("cidade_id");

                    b.Property<string>("CodigoPostal")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("codigo_postal");

                    b.Property<string>("Complemento")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("complemento");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("creation_date");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deletion_date");

                    b.Property<string>("IdUserCreation")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("id_user_creation");

                    b.Property<string>("IdUserDeletion")
                        .HasColumnType("text")
                        .HasColumnName("id_user_deletion");

                    b.Property<string>("IdUserModification")
                        .HasColumnType("text")
                        .HasColumnName("id_user_modification");

                    b.Property<string>("Logradouro")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("logradouro");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modification_date");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("numero");

                    b.HasKey("Id")
                        .HasName("endereco_id");

                    b.HasIndex("CidadeId");

                    b.ToTable("endereco", (string)null);
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.EntitiesOfCore.Telefone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("creation_date");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deletion_date");

                    b.Property<string>("IdUserCreation")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("id_user_creation");

                    b.Property<string>("IdUserDeletion")
                        .HasColumnType("text")
                        .HasColumnName("id_user_deletion");

                    b.Property<string>("IdUserModification")
                        .HasColumnType("text")
                        .HasColumnName("id_user_modification");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modification_date");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("numero");

                    b.HasKey("Id")
                        .HasName("telefone_id");

                    b.ToTable("telefone", (string)null);
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.Financeiro.CentroCusto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("creation_date");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deletion_date");

                    b.Property<long>("Extenso")
                        .HasColumnType("bigint")
                        .HasColumnName("extenso");

                    b.Property<string>("IdUserCreation")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("id_user_creation");

                    b.Property<string>("IdUserDeletion")
                        .HasColumnType("text")
                        .HasColumnName("id_user_deletion");

                    b.Property<string>("IdUserModification")
                        .HasColumnType("text")
                        .HasColumnName("id_user_modification");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modification_date");

                    b.Property<int>("Natureza")
                        .HasColumnType("integer")
                        .HasColumnName("natureza");

                    b.Property<int>("Reduzido")
                        .HasColumnType("integer")
                        .HasColumnName("reduzido");

                    b.HasKey("Id")
                        .HasName("centrocusto_id");

                    b.ToTable("centrocusto", (string)null);
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.Financeiro.RegistroFinanceiro", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<int>("AprovacaoPagamento")
                        .HasColumnType("integer")
                        .HasColumnName("aprovacao_pagamento");

                    b.Property<int>("CentroCustoId")
                        .HasColumnType("integer")
                        .HasColumnName("centro_custo_id");

                    b.Property<int>("ClasseFinanceiraId")
                        .HasColumnType("integer")
                        .HasColumnName("classe_financeira_id");

                    b.Property<string>("Complemento")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("complemento");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("creation_date");

                    b.Property<DateTime>("DataEmissao")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_emissao");

                    b.Property<DateTime>("DataEntrada")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_entrada");

                    b.Property<DateTime>("DataVencimento")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_vencimento");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deletion_date");

                    b.Property<string>("Fornecedor")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("fornecedor");

                    b.Property<int>("FornecedorId")
                        .HasColumnType("integer")
                        .HasColumnName("fornecedor_id");

                    b.Property<string>("IdUserCreation")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("id_user_creation");

                    b.Property<string>("IdUserDeletion")
                        .HasColumnType("text")
                        .HasColumnName("id_user_deletion");

                    b.Property<string>("IdUserModification")
                        .HasColumnType("text")
                        .HasColumnName("id_user_modification");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modification_date");

                    b.Property<string>("NumeroDoc")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("numero_doc");

                    b.Property<int>("ObraId")
                        .HasColumnType("integer")
                        .HasColumnName("obra_id");

                    b.Property<int>("Parcela")
                        .HasColumnType("integer")
                        .HasColumnName("parcela");

                    b.Property<string>("TipoDoc")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("tipo_doc");

                    b.HasKey("Id")
                        .HasName("registrofinanceiro_id");

                    b.HasIndex("CentroCustoId");

                    b.HasIndex("ClasseFinanceiraId");

                    b.HasIndex("ObraId");

                    b.ToTable("registrofinanceiro", (string)null);
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.Fornecedores.Colaborador", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<string>("CNH")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("cnh");

                    b.Property<string>("CTPS")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("ctps");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("creation_date");

                    b.Property<DateTime?>("DataExpiracaoCNH")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_expiracao_cnh");

                    b.Property<DateTime?>("DataExpiracaoExameAdmissional")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_expiracao_exame_admissional");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deletion_date");

                    b.Property<string>("EPI")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("epi");

                    b.Property<string>("ExameAdimissional")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("exame_admissional");

                    b.Property<string>("FichaRegistro")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("ficha_registro");

                    b.Property<string>("IdUserCreation")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("id_user_creation");

                    b.Property<string>("IdUserDeletion")
                        .HasColumnType("text")
                        .HasColumnName("id_user_deletion");

                    b.Property<string>("IdUserModification")
                        .HasColumnType("text")
                        .HasColumnName("id_user_modification");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modification_date");

                    b.Property<string>("NumeroCNH")
                        .HasMaxLength(9)
                        .HasColumnType("character varying(9)")
                        .HasColumnName("numero_cnh");

                    b.Property<string>("NumeroCTPS")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("numero_ctps");

                    b.Property<string>("NumeroExameAdmissional")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("numero_exame_admissional");

                    b.Property<string>("OrdemServico")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("ordem_servico");

                    b.Property<string>("TipoCNH")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("tipo_cnh");

                    b.HasKey("Id")
                        .HasName("colaborador_id");

                    b.ToTable("colaborador", (string)null);
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.Fornecedores.Equipamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("creation_date");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deletion_date");

                    b.Property<string>("IdUserCreation")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("id_user_creation");

                    b.Property<string>("IdUserDeletion")
                        .HasColumnType("text")
                        .HasColumnName("id_user_deletion");

                    b.Property<string>("IdUserModification")
                        .HasColumnType("text")
                        .HasColumnName("id_user_modification");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modification_date");

                    b.HasKey("Id")
                        .HasName("equipamento_id");

                    b.ToTable("equipamento", (string)null);
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.Fornecedores.Fornecedor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("creation_date");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deletion_date");

                    b.Property<string>("IdUserCreation")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("id_user_creation");

                    b.Property<string>("IdUserDeletion")
                        .HasColumnType("text")
                        .HasColumnName("id_user_deletion");

                    b.Property<string>("IdUserModification")
                        .HasColumnType("text")
                        .HasColumnName("id_user_modification");

                    b.Property<string>("InscricaoEstadual")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("inscricao_estadual");

                    b.Property<string>("InscricaoMunicipal")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("inscricao_municipal");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modification_date");

                    b.HasKey("Id")
                        .HasName("fornecedor_id");

                    b.ToTable("fornecedor", (string)null);
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.Obras.Empresa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("creation_date");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deletion_date");

                    b.Property<string>("IdUserCreation")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("id_user_creation");

                    b.Property<string>("IdUserDeletion")
                        .HasColumnType("text")
                        .HasColumnName("id_user_deletion");

                    b.Property<string>("IdUserModification")
                        .HasColumnType("text")
                        .HasColumnName("id_user_modification");

                    b.Property<string>("InscricaoEstadual")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("inscricao_estadual");

                    b.Property<string>("InscricaoMunicipal")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("inscricao_municipal");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modification_date");

                    b.HasKey("Id")
                        .HasName("empresa_id");

                    b.ToTable("empresa", (string)null);
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.Obras.Obra", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("creation_date");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deletion_date");

                    b.Property<int?>("EmpresaId")
                        .HasColumnType("integer");

                    b.Property<string>("IdUserCreation")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("id_user_creation");

                    b.Property<string>("IdUserDeletion")
                        .HasColumnType("text")
                        .HasColumnName("id_user_deletion");

                    b.Property<string>("IdUserModification")
                        .HasColumnType("text")
                        .HasColumnName("id_user_modification");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modification_date");

                    b.HasKey("Id")
                        .HasName("obra_id");

                    b.HasIndex("EmpresaId");

                    b.ToTable("obra", (string)null);
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.Planejamentos.Insumo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("creation_date");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deletion_date");

                    b.Property<string>("IdUserCreation")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("id_user_creation");

                    b.Property<string>("IdUserDeletion")
                        .HasColumnType("text")
                        .HasColumnName("id_user_deletion");

                    b.Property<string>("IdUserModification")
                        .HasColumnType("text")
                        .HasColumnName("id_user_modification");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modification_date");

                    b.Property<int>("Tipo")
                        .HasColumnType("integer")
                        .HasColumnName("tipo");

                    b.Property<int>("UnidadeId")
                        .HasColumnType("integer")
                        .HasColumnName("unidade_id");

                    b.HasKey("Id")
                        .HasName("insumo_id");

                    b.HasIndex("UnidadeId");

                    b.ToTable("insumo", (string)null);
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.Planejamentos.Planejamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("creation_date");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deletion_date");

                    b.Property<string>("IdUserCreation")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("id_user_creation");

                    b.Property<string>("IdUserDeletion")
                        .HasColumnType("text")
                        .HasColumnName("id_user_deletion");

                    b.Property<string>("IdUserModification")
                        .HasColumnType("text")
                        .HasColumnName("id_user_modification");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modification_date");

                    b.Property<int>("ObraId")
                        .HasColumnType("integer")
                        .HasColumnName("obra_id");

                    b.HasKey("Id")
                        .HasName("planejamento_id");

                    b.HasIndex("ObraId");

                    b.ToTable("planejamento", (string)null);
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.Planejamentos.PlanejamentoInsumo", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<int>("PlanejamentoId")
                        .HasColumnType("integer")
                        .HasColumnName("id_planejamento");

                    b.Property<int>("InsumoId")
                        .HasColumnType("integer")
                        .HasColumnName("id_insumo");

                    b.Property<DateTime>("DataFinal")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_final");

                    b.Property<DateTime>("DataInicial")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_inicial");

                    b.Property<int>("UnidadeId")
                        .HasColumnType("integer")
                        .HasColumnName("id_unidade");

                    b.HasKey("Id", "PlanejamentoId", "InsumoId");

                    b.HasIndex("InsumoId");

                    b.HasIndex("PlanejamentoId");

                    b.HasIndex("UnidadeId");

                    b.ToTable("planejamentos_insumos", (string)null);
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.Planejamentos.Unidade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("creation_date");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deletion_date");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("descricao");

                    b.Property<string>("IdUserCreation")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("id_user_creation");

                    b.Property<string>("IdUserDeletion")
                        .HasColumnType("text")
                        .HasColumnName("id_user_deletion");

                    b.Property<string>("IdUserModification")
                        .HasColumnType("text")
                        .HasColumnName("id_user_modification");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modification_date");

                    b.Property<string>("Sigla")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("sigla");

                    b.HasKey("Id")
                        .HasName("unidade_id");

                    b.ToTable("unidade", (string)null);
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.Suprimentos.Compra", b =>
                {
                    b.Property<int>("PedidoId")
                        .HasColumnType("integer")
                        .HasColumnName("pedido_id");

                    b.Property<int>("InsumoId")
                        .HasColumnType("integer")
                        .HasColumnName("insumo_id");

                    b.Property<DateTime?>("DataEntrega")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_entrega");

                    b.Property<int>("FornecedorId")
                        .HasColumnType("integer")
                        .HasColumnName("fornecedor_id");

                    b.Property<int?>("LocalEntregaId")
                        .HasColumnType("integer")
                        .HasColumnName("local_entrega_id");

                    b.HasKey("PedidoId", "InsumoId");

                    b.HasIndex("FornecedorId");

                    b.HasIndex("InsumoId");

                    b.HasIndex("LocalEntregaId");

                    b.ToTable("compra", (string)null);
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.Suprimentos.Pedido", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("creation_date");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deletion_date");

                    b.Property<string>("IdUserCreation")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("id_user_creation");

                    b.Property<string>("IdUserDeletion")
                        .HasColumnType("text")
                        .HasColumnName("id_user_deletion");

                    b.Property<string>("IdUserModification")
                        .HasColumnType("text")
                        .HasColumnName("id_user_modification");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modification_date");

                    b.Property<int>("PlanejamentoId")
                        .HasColumnType("integer")
                        .HasColumnName("planejamento_id");

                    b.HasKey("Id")
                        .HasName("pedido_id");

                    b.HasIndex("PlanejamentoId");

                    b.ToTable("pedido", (string)null);
                });

            modelBuilder.Entity("colaboradores_emails", b =>
                {
                    b.Property<int>("colaborador_id")
                        .HasColumnType("integer");

                    b.Property<int>("email_id")
                        .HasColumnType("integer");

                    b.HasKey("colaborador_id", "email_id");

                    b.HasIndex("email_id");

                    b.ToTable("colaboradores_emails");
                });

            modelBuilder.Entity("colaboradores_enderecos", b =>
                {
                    b.Property<int>("colaborador_id")
                        .HasColumnType("integer");

                    b.Property<int>("endereco_id")
                        .HasColumnType("integer");

                    b.HasKey("colaborador_id", "endereco_id");

                    b.HasIndex("endereco_id");

                    b.ToTable("colaboradores_enderecos");
                });

            modelBuilder.Entity("colaboradores_telefones", b =>
                {
                    b.Property<int>("colaborador_id")
                        .HasColumnType("integer");

                    b.Property<int>("telefone_id")
                        .HasColumnType("integer");

                    b.HasKey("colaborador_id", "telefone_id");

                    b.HasIndex("telefone_id");

                    b.ToTable("colaboradores_telefones");
                });

            modelBuilder.Entity("empresas_emails", b =>
                {
                    b.Property<int>("email_id")
                        .HasColumnType("integer");

                    b.Property<int>("empresa_id")
                        .HasColumnType("integer");

                    b.HasKey("email_id", "empresa_id");

                    b.HasIndex("empresa_id");

                    b.ToTable("empresas_emails");
                });

            modelBuilder.Entity("empresas_enderecos", b =>
                {
                    b.Property<int>("empresa_id")
                        .HasColumnType("integer");

                    b.Property<int>("endereco_id")
                        .HasColumnType("integer");

                    b.HasKey("empresa_id", "endereco_id");

                    b.HasIndex("endereco_id");

                    b.ToTable("empresas_enderecos");
                });

            modelBuilder.Entity("empresas_telefones", b =>
                {
                    b.Property<int>("empresa_id")
                        .HasColumnType("integer");

                    b.Property<int>("telefone_id")
                        .HasColumnType("integer");

                    b.HasKey("empresa_id", "telefone_id");

                    b.HasIndex("telefone_id");

                    b.ToTable("empresas_telefones");
                });

            modelBuilder.Entity("fornecedores_emails", b =>
                {
                    b.Property<int>("email_id")
                        .HasColumnType("integer");

                    b.Property<int>("fornecedor_id")
                        .HasColumnType("integer");

                    b.HasKey("email_id", "fornecedor_id");

                    b.HasIndex("fornecedor_id");

                    b.ToTable("fornecedores_emails");
                });

            modelBuilder.Entity("fornecedores_enderecos", b =>
                {
                    b.Property<int>("endereco_id")
                        .HasColumnType("integer");

                    b.Property<int>("fornecedor_id")
                        .HasColumnType("integer");

                    b.HasKey("endereco_id", "fornecedor_id");

                    b.HasIndex("fornecedor_id");

                    b.ToTable("fornecedores_enderecos");
                });

            modelBuilder.Entity("fornecedores_equipamentos", b =>
                {
                    b.Property<int>("equipamento_id")
                        .HasColumnType("integer");

                    b.Property<int>("fornecedor_id")
                        .HasColumnType("integer");

                    b.HasKey("equipamento_id", "fornecedor_id");

                    b.HasIndex("fornecedor_id");

                    b.ToTable("fornecedores_equipamentos");
                });

            modelBuilder.Entity("fornecedores_telefones", b =>
                {
                    b.Property<int>("fornecedor_id")
                        .HasColumnType("integer");

                    b.Property<int>("telefone_id")
                        .HasColumnType("integer");

                    b.HasKey("fornecedor_id", "telefone_id");

                    b.HasIndex("telefone_id");

                    b.ToTable("fornecedores_telefones");
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.EntitiesOfCore.Cidade", b =>
                {
                    b.OwnsOne("Core.ValueObjects.Nome", "Nome", b1 =>
                        {
                            b1.Property<int>("CidadeId")
                                .HasColumnType("integer");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("character varying(255)")
                                .HasColumnName("nome");

                            b1.HasKey("CidadeId");

                            b1.ToTable("cidade");

                            b1.WithOwner()
                                .HasForeignKey("CidadeId");
                        });

                    b.Navigation("Nome")
                        .IsRequired();
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.EntitiesOfCore.Endereco", b =>
                {
                    b.HasOne("Urbamais.Domain.Entities.EntitiesOfCore.Cidade", "Cidade")
                        .WithMany("Endereco")
                        .HasForeignKey("CidadeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cidade");
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.Financeiro.CentroCusto", b =>
                {
                    b.OwnsOne("Core.ValueObjects.Descricao", "Descricao", b1 =>
                        {
                            b1.Property<int>("CentroCustoId")
                                .HasColumnType("integer");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("character varying(255)")
                                .HasColumnName("descricao");

                            b1.HasKey("CentroCustoId");

                            b1.ToTable("centrocusto");

                            b1.WithOwner()
                                .HasForeignKey("CentroCustoId");
                        });

                    b.Navigation("Descricao")
                        .IsRequired();
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.Financeiro.RegistroFinanceiro", b =>
                {
                    b.HasOne("Urbamais.Domain.Entities.Financeiro.CentroCusto", "CentroCusto")
                        .WithMany("RegistrosFinanceirosCentroCusto")
                        .HasForeignKey("CentroCustoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Urbamais.Domain.Entities.Financeiro.CentroCusto", "ClasseFinanceira")
                        .WithMany("RegistrosFinanceirosClasseFinanceira")
                        .HasForeignKey("ClasseFinanceiraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Urbamais.Domain.Entities.Obras.Obra", "Obra")
                        .WithMany()
                        .HasForeignKey("ObraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Core.ValueObjects.ValorMonetario", "Acrescimo", b1 =>
                        {
                            b1.Property<int>("RegistroFinanceiroId")
                                .HasColumnType("integer");

                            b1.Property<decimal?>("Value")
                                .IsRequired()
                                .HasColumnType("numeric")
                                .HasColumnName("valor_acrescimo");

                            b1.HasKey("RegistroFinanceiroId");

                            b1.ToTable("registrofinanceiro");

                            b1.WithOwner()
                                .HasForeignKey("RegistroFinanceiroId");
                        });

                    b.OwnsOne("Core.ValueObjects.ValorMonetario", "Caucao", b1 =>
                        {
                            b1.Property<int>("RegistroFinanceiroId")
                                .HasColumnType("integer");

                            b1.Property<decimal?>("Value")
                                .IsRequired()
                                .HasColumnType("numeric")
                                .HasColumnName("caucao");

                            b1.HasKey("RegistroFinanceiroId");

                            b1.ToTable("registrofinanceiro");

                            b1.WithOwner()
                                .HasForeignKey("RegistroFinanceiroId");
                        });

                    b.OwnsOne("Core.ValueObjects.ValorMonetario", "Desconto", b1 =>
                        {
                            b1.Property<int>("RegistroFinanceiroId")
                                .HasColumnType("integer");

                            b1.Property<decimal?>("Value")
                                .IsRequired()
                                .HasColumnType("numeric")
                                .HasColumnName("desconto");

                            b1.HasKey("RegistroFinanceiroId");

                            b1.ToTable("registrofinanceiro");

                            b1.WithOwner()
                                .HasForeignKey("RegistroFinanceiroId");
                        });

                    b.OwnsOne("Core.ValueObjects.ValorMonetario", "Total", b1 =>
                        {
                            b1.Property<int>("RegistroFinanceiroId")
                                .HasColumnType("integer");

                            b1.Property<decimal?>("Value")
                                .IsRequired()
                                .HasColumnType("numeric")
                                .HasColumnName("total");

                            b1.HasKey("RegistroFinanceiroId");

                            b1.ToTable("registrofinanceiro");

                            b1.WithOwner()
                                .HasForeignKey("RegistroFinanceiroId");
                        });

                    b.OwnsOne("Core.ValueObjects.ValorMonetario", "Valor", b1 =>
                        {
                            b1.Property<int>("RegistroFinanceiroId")
                                .HasColumnType("integer");

                            b1.Property<decimal?>("Value")
                                .IsRequired()
                                .HasColumnType("numeric")
                                .HasColumnName("valor");

                            b1.HasKey("RegistroFinanceiroId");

                            b1.ToTable("registrofinanceiro");

                            b1.WithOwner()
                                .HasForeignKey("RegistroFinanceiroId");
                        });

                    b.OwnsOne("Core.ValueObjects.ValorMonetario", "ValorBaixa", b1 =>
                        {
                            b1.Property<int>("RegistroFinanceiroId")
                                .HasColumnType("integer");

                            b1.Property<decimal?>("Value")
                                .IsRequired()
                                .HasColumnType("numeric")
                                .HasColumnName("valor_baixa");

                            b1.HasKey("RegistroFinanceiroId");

                            b1.ToTable("registrofinanceiro");

                            b1.WithOwner()
                                .HasForeignKey("RegistroFinanceiroId");
                        });

                    b.OwnsOne("Core.ValueObjects.ValorMonetario", "ValorLiquido", b1 =>
                        {
                            b1.Property<int>("RegistroFinanceiroId")
                                .HasColumnType("integer");

                            b1.Property<decimal?>("Value")
                                .IsRequired()
                                .HasColumnType("numeric")
                                .HasColumnName("valor_liquido");

                            b1.HasKey("RegistroFinanceiroId");

                            b1.ToTable("registrofinanceiro");

                            b1.WithOwner()
                                .HasForeignKey("RegistroFinanceiroId");
                        });

                    b.Navigation("Acrescimo")
                        .IsRequired();

                    b.Navigation("Caucao")
                        .IsRequired();

                    b.Navigation("CentroCusto");

                    b.Navigation("ClasseFinanceira");

                    b.Navigation("Desconto")
                        .IsRequired();

                    b.Navigation("Obra");

                    b.Navigation("Total")
                        .IsRequired();

                    b.Navigation("Valor")
                        .IsRequired();

                    b.Navigation("ValorBaixa")
                        .IsRequired();

                    b.Navigation("ValorLiquido")
                        .IsRequired();
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.Fornecedores.Colaborador", b =>
                {
                    b.OwnsOne("Core.ValueObjects.Cpf", "Cpf", b1 =>
                        {
                            b1.Property<int>("ColaboradorId")
                                .HasColumnType("integer");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(11)
                                .HasColumnType("character varying(11)")
                                .HasColumnName("cpf");

                            b1.HasKey("ColaboradorId");

                            b1.ToTable("colaborador");

                            b1.WithOwner()
                                .HasForeignKey("ColaboradorId");
                        });

                    b.OwnsOne("Core.ValueObjects.Nome", "Nome", b1 =>
                        {
                            b1.Property<int>("ColaboradorId")
                                .HasColumnType("integer");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("character varying(255)")
                                .HasColumnName("nome");

                            b1.HasKey("ColaboradorId");

                            b1.ToTable("colaborador");

                            b1.WithOwner()
                                .HasForeignKey("ColaboradorId");
                        });

                    b.Navigation("Cpf")
                        .IsRequired();

                    b.Navigation("Nome")
                        .IsRequired();
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.Fornecedores.Equipamento", b =>
                {
                    b.OwnsOne("Core.ValueObjects.Descricao", "Descricao", b1 =>
                        {
                            b1.Property<int>("EquipamentoId")
                                .HasColumnType("integer");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("character varying(255)")
                                .HasColumnName("descricao");

                            b1.HasKey("EquipamentoId");

                            b1.ToTable("equipamento");

                            b1.WithOwner()
                                .HasForeignKey("EquipamentoId");
                        });

                    b.OwnsOne("Core.ValueObjects.Nome", "Nome", b1 =>
                        {
                            b1.Property<int>("EquipamentoId")
                                .HasColumnType("integer");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("character varying(255)")
                                .HasColumnName("nome");

                            b1.HasKey("EquipamentoId");

                            b1.ToTable("equipamento");

                            b1.WithOwner()
                                .HasForeignKey("EquipamentoId");
                        });

                    b.Navigation("Descricao")
                        .IsRequired();

                    b.Navigation("Nome")
                        .IsRequired();
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.Fornecedores.Fornecedor", b =>
                {
                    b.OwnsOne("Core.ValueObjects.Cnpj", "Cnpj", b1 =>
                        {
                            b1.Property<int>("FornecedorId")
                                .HasColumnType("integer");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(14)
                                .HasColumnType("character varying(14)")
                                .HasColumnName("cnpj");

                            b1.HasKey("FornecedorId");

                            b1.ToTable("fornecedor");

                            b1.WithOwner()
                                .HasForeignKey("FornecedorId");
                        });

                    b.OwnsOne("Core.ValueObjects.Nome", "NomeFantasia", b1 =>
                        {
                            b1.Property<int>("FornecedorId")
                                .HasColumnType("integer");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("character varying(255)")
                                .HasColumnName("nome_fantasia");

                            b1.HasKey("FornecedorId");

                            b1.ToTable("fornecedor");

                            b1.WithOwner()
                                .HasForeignKey("FornecedorId");
                        });

                    b.OwnsOne("Core.ValueObjects.Nome", "RazaoSocial", b1 =>
                        {
                            b1.Property<int>("FornecedorId")
                                .HasColumnType("integer");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("character varying(255)")
                                .HasColumnName("razao_social");

                            b1.HasKey("FornecedorId");

                            b1.ToTable("fornecedor");

                            b1.WithOwner()
                                .HasForeignKey("FornecedorId");
                        });

                    b.Navigation("Cnpj")
                        .IsRequired();

                    b.Navigation("NomeFantasia")
                        .IsRequired();

                    b.Navigation("RazaoSocial")
                        .IsRequired();
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.Obras.Empresa", b =>
                {
                    b.OwnsOne("Core.ValueObjects.Cnpj", "Cnpj", b1 =>
                        {
                            b1.Property<int>("EmpresaId")
                                .HasColumnType("integer");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(14)
                                .HasColumnType("character varying(14)")
                                .HasColumnName("cnpj");

                            b1.HasKey("EmpresaId");

                            b1.ToTable("empresa");

                            b1.WithOwner()
                                .HasForeignKey("EmpresaId");
                        });

                    b.OwnsOne("Core.ValueObjects.Nome", "NomeFantasia", b1 =>
                        {
                            b1.Property<int>("EmpresaId")
                                .HasColumnType("integer");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("character varying(255)")
                                .HasColumnName("nome_fantasia");

                            b1.HasKey("EmpresaId");

                            b1.ToTable("empresa");

                            b1.WithOwner()
                                .HasForeignKey("EmpresaId");
                        });

                    b.OwnsOne("Core.ValueObjects.Nome", "RazaoSocial", b1 =>
                        {
                            b1.Property<int>("EmpresaId")
                                .HasColumnType("integer");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("character varying(255)")
                                .HasColumnName("razao_social");

                            b1.HasKey("EmpresaId");

                            b1.ToTable("empresa");

                            b1.WithOwner()
                                .HasForeignKey("EmpresaId");
                        });

                    b.Navigation("Cnpj")
                        .IsRequired();

                    b.Navigation("NomeFantasia")
                        .IsRequired();

                    b.Navigation("RazaoSocial")
                        .IsRequired();
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.Obras.Obra", b =>
                {
                    b.HasOne("Urbamais.Domain.Entities.Obras.Empresa", null)
                        .WithMany("Obras")
                        .HasForeignKey("EmpresaId");

                    b.OwnsOne("Core.ValueObjects.Descricao", "Descricao", b1 =>
                        {
                            b1.Property<int>("ObraId")
                                .HasColumnType("integer");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("character varying(255)")
                                .HasColumnName("descricao");

                            b1.HasKey("ObraId");

                            b1.ToTable("obra");

                            b1.WithOwner()
                                .HasForeignKey("ObraId");
                        });

                    b.Navigation("Descricao")
                        .IsRequired();
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.Planejamentos.Insumo", b =>
                {
                    b.HasOne("Urbamais.Domain.Entities.Planejamentos.Unidade", "Unidade")
                        .WithMany("Insumos")
                        .HasForeignKey("UnidadeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Core.ValueObjects.Descricao", "Descricao", b1 =>
                        {
                            b1.Property<int>("InsumoId")
                                .HasColumnType("integer");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("character varying(255)")
                                .HasColumnName("descricao");

                            b1.HasKey("InsumoId");

                            b1.ToTable("insumo");

                            b1.WithOwner()
                                .HasForeignKey("InsumoId");
                        });

                    b.OwnsOne("Core.ValueObjects.Nome", "Nome", b1 =>
                        {
                            b1.Property<int>("InsumoId")
                                .HasColumnType("integer");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("character varying(255)")
                                .HasColumnName("nome");

                            b1.HasKey("InsumoId");

                            b1.ToTable("insumo");

                            b1.WithOwner()
                                .HasForeignKey("InsumoId");
                        });

                    b.Navigation("Descricao")
                        .IsRequired();

                    b.Navigation("Nome")
                        .IsRequired();

                    b.Navigation("Unidade");
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.Planejamentos.Planejamento", b =>
                {
                    b.HasOne("Urbamais.Domain.Entities.Obras.Obra", "Obra")
                        .WithMany("Planejamentos")
                        .HasForeignKey("ObraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Obra");
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.Planejamentos.PlanejamentoInsumo", b =>
                {
                    b.HasOne("Urbamais.Domain.Entities.Planejamentos.Insumo", "Insumo")
                        .WithMany("PlanejamentosInsumos")
                        .HasForeignKey("InsumoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Urbamais.Domain.Entities.Planejamentos.Planejamento", "Planejamento")
                        .WithMany("PlanejamentosInsumos")
                        .HasForeignKey("PlanejamentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Urbamais.Domain.Entities.Planejamentos.Unidade", "Unidade")
                        .WithMany()
                        .HasForeignKey("UnidadeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Core.ValueObjects.Quantidade", "Quantidade", b1 =>
                        {
                            b1.Property<int>("PlanejamentoInsumoId")
                                .HasColumnType("integer");

                            b1.Property<int>("PlanejamentoInsumoPlanejamentoId")
                                .HasColumnType("integer");

                            b1.Property<int>("PlanejamentoInsumoInsumoId")
                                .HasColumnType("integer");

                            b1.Property<double?>("Value")
                                .IsRequired()
                                .HasColumnType("double precision")
                                .HasColumnName("quantidade");

                            b1.HasKey("PlanejamentoInsumoId", "PlanejamentoInsumoPlanejamentoId", "PlanejamentoInsumoInsumoId");

                            b1.ToTable("planejamentos_insumos");

                            b1.WithOwner()
                                .HasForeignKey("PlanejamentoInsumoId", "PlanejamentoInsumoPlanejamentoId", "PlanejamentoInsumoInsumoId");
                        });

                    b.OwnsOne("Core.ValueObjects.ValorMonetario", "ValorUnitario", b1 =>
                        {
                            b1.Property<int>("PlanejamentoInsumoId")
                                .HasColumnType("integer");

                            b1.Property<int>("PlanejamentoInsumoPlanejamentoId")
                                .HasColumnType("integer");

                            b1.Property<int>("PlanejamentoInsumoInsumoId")
                                .HasColumnType("integer");

                            b1.Property<decimal?>("Value")
                                .IsRequired()
                                .HasColumnType("numeric")
                                .HasColumnName("valor_unitario");

                            b1.HasKey("PlanejamentoInsumoId", "PlanejamentoInsumoPlanejamentoId", "PlanejamentoInsumoInsumoId");

                            b1.ToTable("planejamentos_insumos");

                            b1.WithOwner()
                                .HasForeignKey("PlanejamentoInsumoId", "PlanejamentoInsumoPlanejamentoId", "PlanejamentoInsumoInsumoId");
                        });

                    b.Navigation("Insumo");

                    b.Navigation("Planejamento");

                    b.Navigation("Quantidade")
                        .IsRequired();

                    b.Navigation("Unidade");

                    b.Navigation("ValorUnitario")
                        .IsRequired();
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.Suprimentos.Compra", b =>
                {
                    b.HasOne("Urbamais.Domain.Entities.Fornecedores.Fornecedor", "Fornecedor")
                        .WithMany()
                        .HasForeignKey("FornecedorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Urbamais.Domain.Entities.Planejamentos.Insumo", "Insumo")
                        .WithMany()
                        .HasForeignKey("InsumoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Urbamais.Domain.Entities.EntitiesOfCore.Endereco", "LocalEntrega")
                        .WithMany("Compras")
                        .HasForeignKey("LocalEntregaId");

                    b.HasOne("Urbamais.Domain.Entities.Suprimentos.Pedido", "Pedido")
                        .WithMany()
                        .HasForeignKey("PedidoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Core.ValueObjects.Quantidade", "Quantidade", b1 =>
                        {
                            b1.Property<int>("CompraPedidoId")
                                .HasColumnType("integer");

                            b1.Property<int>("CompraInsumoId")
                                .HasColumnType("integer");

                            b1.Property<double?>("Value")
                                .IsRequired()
                                .HasColumnType("double precision")
                                .HasColumnName("quantidade");

                            b1.HasKey("CompraPedidoId", "CompraInsumoId");

                            b1.ToTable("compra");

                            b1.WithOwner()
                                .HasForeignKey("CompraPedidoId", "CompraInsumoId");
                        });

                    b.OwnsOne("Core.ValueObjects.ValorMonetario", "ValorUnitario", b1 =>
                        {
                            b1.Property<int>("CompraPedidoId")
                                .HasColumnType("integer");

                            b1.Property<int>("CompraInsumoId")
                                .HasColumnType("integer");

                            b1.Property<decimal?>("Value")
                                .IsRequired()
                                .HasColumnType("numeric")
                                .HasColumnName("valor_unitario");

                            b1.HasKey("CompraPedidoId", "CompraInsumoId");

                            b1.ToTable("compra");

                            b1.WithOwner()
                                .HasForeignKey("CompraPedidoId", "CompraInsumoId");
                        });

                    b.Navigation("Fornecedor");

                    b.Navigation("Insumo");

                    b.Navigation("LocalEntrega");

                    b.Navigation("Pedido");

                    b.Navigation("Quantidade")
                        .IsRequired();

                    b.Navigation("ValorUnitario")
                        .IsRequired();
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.Suprimentos.Pedido", b =>
                {
                    b.HasOne("Urbamais.Domain.Entities.Planejamentos.Planejamento", "Planejamento")
                        .WithMany("Ordens")
                        .HasForeignKey("PlanejamentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Planejamento");
                });

            modelBuilder.Entity("colaboradores_emails", b =>
                {
                    b.HasOne("Urbamais.Domain.Entities.Fornecedores.Colaborador", null)
                        .WithMany()
                        .HasForeignKey("colaborador_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Urbamais.Domain.Entities.EntitiesOfCore.Email", null)
                        .WithMany()
                        .HasForeignKey("email_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("colaboradores_enderecos", b =>
                {
                    b.HasOne("Urbamais.Domain.Entities.Fornecedores.Colaborador", null)
                        .WithMany()
                        .HasForeignKey("colaborador_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Urbamais.Domain.Entities.EntitiesOfCore.Endereco", null)
                        .WithMany()
                        .HasForeignKey("endereco_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("colaboradores_telefones", b =>
                {
                    b.HasOne("Urbamais.Domain.Entities.Fornecedores.Colaborador", null)
                        .WithMany()
                        .HasForeignKey("colaborador_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Urbamais.Domain.Entities.EntitiesOfCore.Telefone", null)
                        .WithMany()
                        .HasForeignKey("telefone_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("empresas_emails", b =>
                {
                    b.HasOne("Urbamais.Domain.Entities.EntitiesOfCore.Email", null)
                        .WithMany()
                        .HasForeignKey("email_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Urbamais.Domain.Entities.Obras.Empresa", null)
                        .WithMany()
                        .HasForeignKey("empresa_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("empresas_enderecos", b =>
                {
                    b.HasOne("Urbamais.Domain.Entities.Obras.Empresa", null)
                        .WithMany()
                        .HasForeignKey("empresa_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Urbamais.Domain.Entities.EntitiesOfCore.Endereco", null)
                        .WithMany()
                        .HasForeignKey("endereco_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("empresas_telefones", b =>
                {
                    b.HasOne("Urbamais.Domain.Entities.Obras.Empresa", null)
                        .WithMany()
                        .HasForeignKey("empresa_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Urbamais.Domain.Entities.EntitiesOfCore.Telefone", null)
                        .WithMany()
                        .HasForeignKey("telefone_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("fornecedores_emails", b =>
                {
                    b.HasOne("Urbamais.Domain.Entities.EntitiesOfCore.Email", null)
                        .WithMany()
                        .HasForeignKey("email_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Urbamais.Domain.Entities.Fornecedores.Fornecedor", null)
                        .WithMany()
                        .HasForeignKey("fornecedor_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("fornecedores_enderecos", b =>
                {
                    b.HasOne("Urbamais.Domain.Entities.EntitiesOfCore.Endereco", null)
                        .WithMany()
                        .HasForeignKey("endereco_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Urbamais.Domain.Entities.Fornecedores.Fornecedor", null)
                        .WithMany()
                        .HasForeignKey("fornecedor_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("fornecedores_equipamentos", b =>
                {
                    b.HasOne("Urbamais.Domain.Entities.Fornecedores.Equipamento", null)
                        .WithMany()
                        .HasForeignKey("equipamento_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Urbamais.Domain.Entities.Fornecedores.Fornecedor", null)
                        .WithMany()
                        .HasForeignKey("fornecedor_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("fornecedores_telefones", b =>
                {
                    b.HasOne("Urbamais.Domain.Entities.Fornecedores.Fornecedor", null)
                        .WithMany()
                        .HasForeignKey("fornecedor_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Urbamais.Domain.Entities.EntitiesOfCore.Telefone", null)
                        .WithMany()
                        .HasForeignKey("telefone_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.EntitiesOfCore.Cidade", b =>
                {
                    b.Navigation("Endereco");
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.EntitiesOfCore.Endereco", b =>
                {
                    b.Navigation("Compras");
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.Financeiro.CentroCusto", b =>
                {
                    b.Navigation("RegistrosFinanceirosCentroCusto");

                    b.Navigation("RegistrosFinanceirosClasseFinanceira");
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.Obras.Empresa", b =>
                {
                    b.Navigation("Obras");
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.Obras.Obra", b =>
                {
                    b.Navigation("Planejamentos");
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.Planejamentos.Insumo", b =>
                {
                    b.Navigation("PlanejamentosInsumos");
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.Planejamentos.Planejamento", b =>
                {
                    b.Navigation("Ordens");

                    b.Navigation("PlanejamentosInsumos");
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.Planejamentos.Unidade", b =>
                {
                    b.Navigation("Insumos");
                });
#pragma warning restore 612, 618
        }
    }
}
