// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Urbamais.Infra.Config;

#nullable disable

namespace Urbamais.Infra.Migrations
{
    [DbContext(typeof(ContextEf))]
    [Migration("20230714170954_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseSerialColumns(modelBuilder);

            modelBuilder.Entity("Urbamais.Domain.Entities.Construction.Companie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("creation_date");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deletion_date");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modification_date");

                    b.Property<string>("MunicipalRegistration")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("municipal_registration");

                    b.Property<string>("StateRegistration")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("state_registration");

                    b.HasKey("Id")
                        .HasName("companie_id");

                    b.ToTable("companie", (string)null);
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.Construction.Construction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanieId")
                        .HasColumnType("integer")
                        .HasColumnName("companie_id");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("creation_date");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deletion_date");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modification_date");

                    b.HasKey("Id")
                        .HasName("construction_id");

                    b.HasIndex("CompanieId");

                    b.ToTable("construction", (string)null);
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.EntitiesOfCore.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("integer")
                        .HasColumnName("city_id");

                    b.Property<string>("Complement")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("complement");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("creation_date");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deletion_date");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modification_date");

                    b.Property<string>("Neighborhood")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("neighborhood");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("number");

                    b.Property<string>("Thoroughfare")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("thoroughfare");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("zip_code");

                    b.HasKey("Id")
                        .HasName("address_id");

                    b.HasIndex("CityId");

                    b.ToTable("address", (string)null);
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.EntitiesOfCore.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("creation_date");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deletion_date");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modification_date");

                    b.Property<int>("Uf")
                        .HasColumnType("integer")
                        .HasColumnName("uf");

                    b.HasKey("Id")
                        .HasName("city_id");

                    b.ToTable("city", (string)null);
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.EntitiesOfCore.Email", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("address");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("creation_date");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deletion_date");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modification_date");

                    b.HasKey("Id")
                        .HasName("email_id");

                    b.ToTable("email", (string)null);
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.EntitiesOfCore.Phone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("creation_date");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deletion_date");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modification_date");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("number");

                    b.HasKey("Id")
                        .HasName("phone_id");

                    b.ToTable("phone", (string)null);
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.Planning.Input", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("creation_date");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deletion_date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("description");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modification_date");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<int>("UnitId")
                        .HasColumnType("integer")
                        .HasColumnName("unit_id");

                    b.HasKey("Id")
                        .HasName("input_id");

                    b.HasIndex("UnitId");

                    b.ToTable("input", (string)null);
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.Planning.Planning", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<int>("ConstructionId")
                        .HasColumnType("integer")
                        .HasColumnName("construction_id");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("creation_date");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deletion_date");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modification_date");

                    b.HasKey("Id")
                        .HasName("planning_id");

                    b.HasIndex("ConstructionId");

                    b.ToTable("planning", (string)null);
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.Planning.PlanningInput", b =>
                {
                    b.Property<int>("PlanningId")
                        .HasColumnType("integer")
                        .HasColumnName("planning_id");

                    b.Property<int>("InputId")
                        .HasColumnType("integer")
                        .HasColumnName("input_id");

                    b.Property<double>("Amount")
                        .HasColumnType("double precision")
                        .HasColumnName("amount");

                    b.Property<DateTime>("FinalDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("final_date");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("start_date");

                    b.Property<decimal>("UnitaryValue")
                        .HasColumnType("numeric")
                        .HasColumnName("unitary_value");

                    b.HasKey("PlanningId", "InputId");

                    b.HasIndex("InputId");

                    b.ToTable("planning_inputs", (string)null);
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.Planning.Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<string>("Acronym")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("acronym");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("creation_date");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deletion_date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("description");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modification_date");

                    b.HasKey("Id")
                        .HasName("unit_id");

                    b.ToTable("unit", (string)null);
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.Supplier.Collaborator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<string>("AdmissionExam")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("admission_exam");

                    b.Property<string>("CNH")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("cnh");

                    b.Property<string>("CTPS")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("ctps");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("creation_date");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deletion_date");

                    b.Property<string>("EPI")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("epi");

                    b.Property<DateTime?>("ExpirationDateAdmissionExam")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("expiration_date_admission_exam");

                    b.Property<DateTime?>("ExpirationDateCNH")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("expiration_date_cnh");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modification_date");

                    b.Property<string>("NumberAdmissionExam")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("number_admission_exam");

                    b.Property<string>("NumberCNH")
                        .HasMaxLength(9)
                        .HasColumnType("character varying(9)")
                        .HasColumnName("number_cnh");

                    b.Property<string>("NumberCTPS")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("number_ctps");

                    b.Property<string>("RegistrationForm")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("registration_form");

                    b.Property<string>("ServiceOrder")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("service_order");

                    b.Property<string>("TypeCNH")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("type_cnh");

                    b.HasKey("Id")
                        .HasName("collaborator_id");

                    b.ToTable("collaborator", (string)null);
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.Supplier.Equipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("creation_date");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deletion_date");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modification_date");

                    b.HasKey("Id")
                        .HasName("equipment_id");

                    b.ToTable("equipment", (string)null);
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.Supplier.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("creation_date");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deletion_date");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modification_date");

                    b.Property<string>("MunicipalRegistration")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("municipal_registration");

                    b.Property<string>("StateRegistration")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("state_registration");

                    b.HasKey("Id")
                        .HasName("supplier_id");

                    b.ToTable("supplier", (string)null);
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.Supply.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("creation_date");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deletion_date");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modification_date");

                    b.Property<int>("PlanningId")
                        .HasColumnType("integer")
                        .HasColumnName("planning_id");

                    b.HasKey("Id")
                        .HasName("order_id");

                    b.HasIndex("PlanningId");

                    b.ToTable("order", (string)null);
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.Suprimento.Purchase", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("integer")
                        .HasColumnName("order_id");

                    b.Property<int>("InputId")
                        .HasColumnType("integer")
                        .HasColumnName("input_id");

                    b.Property<double>("Amount")
                        .HasColumnType("double precision")
                        .HasColumnName("amount");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("delivery_date");

                    b.Property<int?>("DeliveryPlaceId")
                        .IsRequired()
                        .HasColumnType("integer")
                        .HasColumnName("delivery_place_id");

                    b.Property<int>("SupplierId")
                        .HasColumnType("integer")
                        .HasColumnName("supplier_id");

                    b.Property<decimal>("UnitaryValue")
                        .HasColumnType("numeric")
                        .HasColumnName("unitary_value");

                    b.HasKey("OrderId", "InputId");

                    b.HasIndex("DeliveryPlaceId");

                    b.HasIndex("InputId");

                    b.HasIndex("SupplierId");

                    b.ToTable("purchase", (string)null);
                });

            modelBuilder.Entity("collaborators_addresses", b =>
                {
                    b.Property<int>("address_id")
                        .HasColumnType("integer");

                    b.Property<int>("collaborator_id")
                        .HasColumnType("integer");

                    b.HasKey("address_id", "collaborator_id");

                    b.HasIndex("collaborator_id");

                    b.ToTable("collaborators_addresses");
                });

            modelBuilder.Entity("collaborators_emails", b =>
                {
                    b.Property<int>("collaborator_id")
                        .HasColumnType("integer");

                    b.Property<int>("email_id")
                        .HasColumnType("integer");

                    b.HasKey("collaborator_id", "email_id");

                    b.HasIndex("email_id");

                    b.ToTable("collaborators_emails");
                });

            modelBuilder.Entity("collaborators_phones", b =>
                {
                    b.Property<int>("collaborator_id")
                        .HasColumnType("integer");

                    b.Property<int>("phone_id")
                        .HasColumnType("integer");

                    b.HasKey("collaborator_id", "phone_id");

                    b.HasIndex("phone_id");

                    b.ToTable("collaborators_phones");
                });

            modelBuilder.Entity("companies_addresses", b =>
                {
                    b.Property<int>("address_id")
                        .HasColumnType("integer");

                    b.Property<int>("companie_id")
                        .HasColumnType("integer");

                    b.HasKey("address_id", "companie_id");

                    b.HasIndex("companie_id");

                    b.ToTable("companies_addresses");
                });

            modelBuilder.Entity("companies_emails", b =>
                {
                    b.Property<int>("companie_id")
                        .HasColumnType("integer");

                    b.Property<int>("email_id")
                        .HasColumnType("integer");

                    b.HasKey("companie_id", "email_id");

                    b.HasIndex("email_id");

                    b.ToTable("companies_emails");
                });

            modelBuilder.Entity("companies_phones", b =>
                {
                    b.Property<int>("companie_id")
                        .HasColumnType("integer");

                    b.Property<int>("phone_id")
                        .HasColumnType("integer");

                    b.HasKey("companie_id", "phone_id");

                    b.HasIndex("phone_id");

                    b.ToTable("companies_phones");
                });

            modelBuilder.Entity("suppliers_addresses", b =>
                {
                    b.Property<int>("address_id")
                        .HasColumnType("integer");

                    b.Property<int>("supplier_id")
                        .HasColumnType("integer");

                    b.HasKey("address_id", "supplier_id");

                    b.HasIndex("supplier_id");

                    b.ToTable("suppliers_addresses");
                });

            modelBuilder.Entity("suppliers_emails", b =>
                {
                    b.Property<int>("email_id")
                        .HasColumnType("integer");

                    b.Property<int>("supplier_id")
                        .HasColumnType("integer");

                    b.HasKey("email_id", "supplier_id");

                    b.HasIndex("supplier_id");

                    b.ToTable("suppliers_emails");
                });

            modelBuilder.Entity("suppliers_equipaments", b =>
                {
                    b.Property<int>("equipament_id")
                        .HasColumnType("integer");

                    b.Property<int>("supplier_id")
                        .HasColumnType("integer");

                    b.HasKey("equipament_id", "supplier_id");

                    b.HasIndex("supplier_id");

                    b.ToTable("suppliers_equipaments");
                });

            modelBuilder.Entity("suppliers_phones", b =>
                {
                    b.Property<int>("phone_id")
                        .HasColumnType("integer");

                    b.Property<int>("supplier_id")
                        .HasColumnType("integer");

                    b.HasKey("phone_id", "supplier_id");

                    b.HasIndex("supplier_id");

                    b.ToTable("suppliers_phones");
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.Construction.Companie", b =>
                {
                    b.OwnsOne("Core.ValueObjects.CnpjVO", "Cnpj", b1 =>
                        {
                            b1.Property<int>("CompanieId")
                                .HasColumnType("integer");

                            b1.Property<string>("Cnpj")
                                .IsRequired()
                                .HasMaxLength(14)
                                .HasColumnType("character varying(14)")
                                .HasColumnName("cnpj");

                            b1.HasKey("CompanieId");

                            b1.ToTable("companie");

                            b1.WithOwner()
                                .HasForeignKey("CompanieId");
                        });

                    b.OwnsOne("Core.ValueObjects.NameVO", "CorporateName", b1 =>
                        {
                            b1.Property<int>("CompanieId")
                                .HasColumnType("integer");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("character varying(255)")
                                .HasColumnName("corporate_name");

                            b1.HasKey("CompanieId");

                            b1.ToTable("companie");

                            b1.WithOwner()
                                .HasForeignKey("CompanieId");
                        });

                    b.OwnsOne("Core.ValueObjects.NameVO", "TradeName", b1 =>
                        {
                            b1.Property<int>("CompanieId")
                                .HasColumnType("integer");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("character varying(255)")
                                .HasColumnName("trade_name");

                            b1.HasKey("CompanieId");

                            b1.ToTable("companie");

                            b1.WithOwner()
                                .HasForeignKey("CompanieId");
                        });

                    b.Navigation("Cnpj")
                        .IsRequired();

                    b.Navigation("CorporateName")
                        .IsRequired();

                    b.Navigation("TradeName")
                        .IsRequired();
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.Construction.Construction", b =>
                {
                    b.HasOne("Urbamais.Domain.Entities.Construction.Companie", "Companie")
                        .WithMany("Constructions")
                        .HasForeignKey("CompanieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Core.ValueObjects.DescriptionVO", "Description", b1 =>
                        {
                            b1.Property<int>("ConstructionId")
                                .HasColumnType("integer");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("character varying(255)")
                                .HasColumnName("description");

                            b1.HasKey("ConstructionId");

                            b1.ToTable("construction");

                            b1.WithOwner()
                                .HasForeignKey("ConstructionId");
                        });

                    b.Navigation("Companie");

                    b.Navigation("Description")
                        .IsRequired();
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.EntitiesOfCore.Address", b =>
                {
                    b.HasOne("Urbamais.Domain.Entities.EntitiesOfCore.City", "City")
                        .WithMany("Address")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.EntitiesOfCore.City", b =>
                {
                    b.OwnsOne("Core.ValueObjects.NameVO", "Name", b1 =>
                        {
                            b1.Property<int>("CityId")
                                .HasColumnType("integer");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("character varying(255)")
                                .HasColumnName("name");

                            b1.HasKey("CityId");

                            b1.ToTable("city");

                            b1.WithOwner()
                                .HasForeignKey("CityId");
                        });

                    b.Navigation("Name")
                        .IsRequired();
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.Planning.Input", b =>
                {
                    b.HasOne("Urbamais.Domain.Entities.Planning.Unit", "Unit")
                        .WithMany("Inputs")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Core.ValueObjects.NameVO", "Name", b1 =>
                        {
                            b1.Property<int>("InputId")
                                .HasColumnType("integer");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("character varying(255)")
                                .HasColumnName("name");

                            b1.HasKey("InputId");

                            b1.ToTable("input");

                            b1.WithOwner()
                                .HasForeignKey("InputId");
                        });

                    b.Navigation("Name")
                        .IsRequired();

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.Planning.Planning", b =>
                {
                    b.HasOne("Urbamais.Domain.Entities.Construction.Construction", "Obra")
                        .WithMany("Plannings")
                        .HasForeignKey("ConstructionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Obra");
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.Planning.PlanningInput", b =>
                {
                    b.HasOne("Urbamais.Domain.Entities.Planning.Input", "Input")
                        .WithMany("PlannigInputs")
                        .HasForeignKey("InputId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Urbamais.Domain.Entities.Planning.Planning", "Planning")
                        .WithMany("PlannigInputs")
                        .HasForeignKey("PlanningId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Input");

                    b.Navigation("Planning");
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.Supplier.Collaborator", b =>
                {
                    b.OwnsOne("Core.ValueObjects.CpfVO", "Cpf", b1 =>
                        {
                            b1.Property<int>("CollaboratorId")
                                .HasColumnType("integer");

                            b1.Property<string>("Cpf")
                                .IsRequired()
                                .HasMaxLength(11)
                                .HasColumnType("character varying(11)")
                                .HasColumnName("cpf");

                            b1.HasKey("CollaboratorId");

                            b1.ToTable("collaborator");

                            b1.WithOwner()
                                .HasForeignKey("CollaboratorId");
                        });

                    b.OwnsOne("Core.ValueObjects.NameVO", "Name", b1 =>
                        {
                            b1.Property<int>("CollaboratorId")
                                .HasColumnType("integer");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("character varying(255)")
                                .HasColumnName("name");

                            b1.HasKey("CollaboratorId");

                            b1.ToTable("collaborator");

                            b1.WithOwner()
                                .HasForeignKey("CollaboratorId");
                        });

                    b.Navigation("Cpf")
                        .IsRequired();

                    b.Navigation("Name")
                        .IsRequired();
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.Supplier.Equipment", b =>
                {
                    b.OwnsOne("Core.ValueObjects.DescriptionVO", "Description", b1 =>
                        {
                            b1.Property<int>("EquipmentId")
                                .HasColumnType("integer");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("character varying(255)")
                                .HasColumnName("description");

                            b1.HasKey("EquipmentId");

                            b1.ToTable("equipment");

                            b1.WithOwner()
                                .HasForeignKey("EquipmentId");
                        });

                    b.OwnsOne("Core.ValueObjects.NameVO", "Name", b1 =>
                        {
                            b1.Property<int>("EquipmentId")
                                .HasColumnType("integer");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("character varying(255)")
                                .HasColumnName("name");

                            b1.HasKey("EquipmentId");

                            b1.ToTable("equipment");

                            b1.WithOwner()
                                .HasForeignKey("EquipmentId");
                        });

                    b.Navigation("Description")
                        .IsRequired();

                    b.Navigation("Name")
                        .IsRequired();
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.Supplier.Supplier", b =>
                {
                    b.OwnsOne("Core.ValueObjects.CnpjVO", "Cnpj", b1 =>
                        {
                            b1.Property<int>("SupplierId")
                                .HasColumnType("integer");

                            b1.Property<string>("Cnpj")
                                .IsRequired()
                                .HasMaxLength(14)
                                .HasColumnType("character varying(14)")
                                .HasColumnName("cnpj");

                            b1.HasKey("SupplierId");

                            b1.ToTable("supplier");

                            b1.WithOwner()
                                .HasForeignKey("SupplierId");
                        });

                    b.OwnsOne("Core.ValueObjects.NameVO", "CorporateName", b1 =>
                        {
                            b1.Property<int>("SupplierId")
                                .HasColumnType("integer");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("character varying(255)")
                                .HasColumnName("corporate_name");

                            b1.HasKey("SupplierId");

                            b1.ToTable("supplier");

                            b1.WithOwner()
                                .HasForeignKey("SupplierId");
                        });

                    b.OwnsOne("Core.ValueObjects.NameVO", "TradeName", b1 =>
                        {
                            b1.Property<int>("SupplierId")
                                .HasColumnType("integer");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("character varying(255)")
                                .HasColumnName("trade_name");

                            b1.HasKey("SupplierId");

                            b1.ToTable("supplier");

                            b1.WithOwner()
                                .HasForeignKey("SupplierId");
                        });

                    b.Navigation("Cnpj")
                        .IsRequired();

                    b.Navigation("CorporateName")
                        .IsRequired();

                    b.Navigation("TradeName")
                        .IsRequired();
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.Supply.Order", b =>
                {
                    b.HasOne("Urbamais.Domain.Entities.Planning.Planning", "Planning")
                        .WithMany("Orders")
                        .HasForeignKey("PlanningId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Planning");
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.Suprimento.Purchase", b =>
                {
                    b.HasOne("Urbamais.Domain.Entities.EntitiesOfCore.Address", "DeliveryPlace")
                        .WithMany("Purchases")
                        .HasForeignKey("DeliveryPlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Urbamais.Domain.Entities.Planning.Input", "Input")
                        .WithMany()
                        .HasForeignKey("InputId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Urbamais.Domain.Entities.Supply.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Urbamais.Domain.Entities.Supplier.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeliveryPlace");

                    b.Navigation("Input");

                    b.Navigation("Order");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("collaborators_addresses", b =>
                {
                    b.HasOne("Urbamais.Domain.Entities.EntitiesOfCore.Address", null)
                        .WithMany()
                        .HasForeignKey("address_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Urbamais.Domain.Entities.Supplier.Collaborator", null)
                        .WithMany()
                        .HasForeignKey("collaborator_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("collaborators_emails", b =>
                {
                    b.HasOne("Urbamais.Domain.Entities.Supplier.Collaborator", null)
                        .WithMany()
                        .HasForeignKey("collaborator_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Urbamais.Domain.Entities.EntitiesOfCore.Email", null)
                        .WithMany()
                        .HasForeignKey("email_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("collaborators_phones", b =>
                {
                    b.HasOne("Urbamais.Domain.Entities.Supplier.Collaborator", null)
                        .WithMany()
                        .HasForeignKey("collaborator_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Urbamais.Domain.Entities.EntitiesOfCore.Phone", null)
                        .WithMany()
                        .HasForeignKey("phone_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("companies_addresses", b =>
                {
                    b.HasOne("Urbamais.Domain.Entities.EntitiesOfCore.Address", null)
                        .WithMany()
                        .HasForeignKey("address_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Urbamais.Domain.Entities.Construction.Companie", null)
                        .WithMany()
                        .HasForeignKey("companie_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("companies_emails", b =>
                {
                    b.HasOne("Urbamais.Domain.Entities.Construction.Companie", null)
                        .WithMany()
                        .HasForeignKey("companie_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Urbamais.Domain.Entities.EntitiesOfCore.Email", null)
                        .WithMany()
                        .HasForeignKey("email_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("companies_phones", b =>
                {
                    b.HasOne("Urbamais.Domain.Entities.Construction.Companie", null)
                        .WithMany()
                        .HasForeignKey("companie_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Urbamais.Domain.Entities.EntitiesOfCore.Phone", null)
                        .WithMany()
                        .HasForeignKey("phone_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("suppliers_addresses", b =>
                {
                    b.HasOne("Urbamais.Domain.Entities.EntitiesOfCore.Address", null)
                        .WithMany()
                        .HasForeignKey("address_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Urbamais.Domain.Entities.Supplier.Supplier", null)
                        .WithMany()
                        .HasForeignKey("supplier_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("suppliers_emails", b =>
                {
                    b.HasOne("Urbamais.Domain.Entities.EntitiesOfCore.Email", null)
                        .WithMany()
                        .HasForeignKey("email_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Urbamais.Domain.Entities.Supplier.Supplier", null)
                        .WithMany()
                        .HasForeignKey("supplier_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("suppliers_equipaments", b =>
                {
                    b.HasOne("Urbamais.Domain.Entities.Supplier.Equipment", null)
                        .WithMany()
                        .HasForeignKey("equipament_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Urbamais.Domain.Entities.Supplier.Supplier", null)
                        .WithMany()
                        .HasForeignKey("supplier_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("suppliers_phones", b =>
                {
                    b.HasOne("Urbamais.Domain.Entities.EntitiesOfCore.Phone", null)
                        .WithMany()
                        .HasForeignKey("phone_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Urbamais.Domain.Entities.Supplier.Supplier", null)
                        .WithMany()
                        .HasForeignKey("supplier_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.Construction.Companie", b =>
                {
                    b.Navigation("Constructions");
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.Construction.Construction", b =>
                {
                    b.Navigation("Plannings");
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.EntitiesOfCore.Address", b =>
                {
                    b.Navigation("Purchases");
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.EntitiesOfCore.City", b =>
                {
                    b.Navigation("Address");
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.Planning.Input", b =>
                {
                    b.Navigation("PlannigInputs");
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.Planning.Planning", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("PlannigInputs");
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.Planning.Unit", b =>
                {
                    b.Navigation("Inputs");
                });
#pragma warning restore 612, 618
        }
    }
}
